SHELL := /bin/bash
INSTANCES_FILE := sipinstances.txt
INSTANCES := $(shell cut -d' ' -f1 $(INSTANCES_FILE) )
ALGORITHMS := clique cp-fc kdown james-cpp-max james-cpp-max-down kdown-par/t32
RESULTS := gpgnode-results/sip

all : $(RESULTS)/runtimes.data $(RESULTS)/nodes.data

runtimes : $(foreach i, $(INSTANCES), $(foreach a, $(ALGORITHMS), $(RESULTS)/$(a)/$i.runtime ))

nodes : $(foreach i, $(INSTANCES), $(foreach a, $(ALGORITHMS), $(RESULTS)/$(a)/$i.nodes ))

$(RESULTS)/clique/%.runtime : $(RESULTS)/clique/%.out
	if grep -q 'too big' $^ ; then echo 1e6 ; else tail -n1 < $^ | cut -d' ' -f1 ; fi > $@
	[[ -s $@ ]]

$(RESULTS)/cp-fc/%.runtime : $(RESULTS)/cp-fc/%.out
	if grep -q 'too big' $^ ; then echo 1e3 ; else grep '^time :' < $^ | cut -d':' -f2 ; fi > $@
	[[ -s $@ ]]

$(RESULTS)/james-cpp-max/%.runtime : $(RESULTS)/james-cpp-max/%.out
	grep '^CPU time (ms):' < $^ | cut -d':' -f2 > $@
	[[ -s $@ ]]

$(RESULTS)/james-cpp-max-down/%.runtime : $(RESULTS)/james-cpp-max-down/%.out
	grep '^CPU time (ms):' < $^ | cut -d':' -f2 > $@
	[[ -s $@ ]]

$(RESULTS)/kdown/%.runtime : $(RESULTS)/kdown/%.out
	tail -n2 < $^ | head -n1 | cut -d' ' -f1 > $@
	[[ -s $@ ]]

$(RESULTS)/kdown-par/t32/%.runtime : $(RESULTS)/kdown-par/t32/%.out
	tail -n2 < $^ | head -n1 | cut -d' ' -f1 > $@
	[[ -s $@ ]]

$(RESULTS)/clique/%.nodes : $(RESULTS)/clique/%.out
	if grep -q 'too big\|aborted' $^ ; then echo NaN ; else tail -n3 < $^ | head -n1 | cut -d' ' -f2 ; fi > $@
	[[ -s $@ ]]

$(RESULTS)/cp-fc/%.nodes : $(RESULTS)/cp-fc/%.out
	if grep -q 'too big\|TIMEOUT' $^ ; then echo NaN ; else grep '^nodes :' < $^ | cut -d':' -f2 ; fi > $@
	[[ -s $@ ]]

$(RESULTS)/james-cpp-max/%.nodes : $(RESULTS)/james-cpp-max/%.out
	if grep -q TIMEOUT $^ ; then echo NaN ; else grep '^Nodes:' < $^ | cut -d':' -f2 ; fi > $@
	[[ -s $@ ]]

$(RESULTS)/james-cpp-max-down/%.nodes : $(RESULTS)/james-cpp-max-down/%.out
	if grep -q TIMEOUT $^ ; then echo NaN ; else grep '^Nodes:' < $^ | cut -d':' -f2 ; fi > $@
	[[ -s $@ ]]

$(RESULTS)/kdown/%.nodes : $(RESULTS)/kdown/%.out
	if grep -q aborted $^ ; then echo NaN ; else tail -n4 < $^ | head -n1 | cut -d' ' -f2 ; fi > $@
	[[ -s $@ ]]

$(RESULTS)/kdown-par/t32/%.nodes : $(RESULTS)/kdown-par/t32/%.out
	if grep -q aborted $^ ; then echo NaN ; else tail -n4 < $^ | head -n1 | cut -d' ' -f2 ; fi > $@
	[[ -s $@ ]]

$(RESULTS)/runtimes.data : runtimes
	{ echo instance $(ALGORITHMS) ; cut -d' ' -f1 < $(INSTANCES_FILE) | while read a ; do \
	    echo $$a $$(cat $(foreach a, $(ALGORITHMS), $(RESULTS)/$(a)/$$a.runtime ) ) ; \
	done ; } | tee $@

$(RESULTS)/nodes.data : nodes
	{ echo instance $(ALGORITHMS) ; cut -d' ' -f1 < $(INSTANCES_FILE) | while read a ; do \
	    echo $$a $$(cat $(foreach a, $(ALGORITHMS), $(RESULTS)/$(a)/$$a.nodes ) ) ; \
	done ; } | tee $@

